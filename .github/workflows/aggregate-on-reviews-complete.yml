name: Aggregate After All Reviews

on:
  pull_request_review:
    types: [submitted]

# Define the list of required reviewers here
env:
  REQUIRED_REVIEWERS: '["Copilot", "codacy-production[bot]", "coderabbitai[bot]", "devotiontoc"]'

jobs:
  check-and-aggregate:
    name: Check for All Reviews & Aggregate
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
      contents: write

    steps:
      # This step checks if all required reviews have been submitted
      - name: Check for all required reviews
        id: check_reviews
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_URL: ${{ github.event.pull_request.html_url }}
        run: |
          # Get the list of users who have ACTUALLY submitted a review
          submitted_reviewers=$(gh pr view $PR_URL --json reviews -q '.reviews.[].author.login' | uniq)
          
          echo "Submitted reviewers: $submitted_reviewers"
          echo "Required reviewers: ${{ env.REQUIRED_REVIEWERS }}"

          all_present=true
          # Loop through the list of required reviewers
          for reviewer in $(echo "${{ env.REQUIRED_REVIEWERS }}" | jq -r '.[]'); do
            # Check if the current required reviewer is in the list of submitted reviewers
            if ! echo "$submitted_reviewers" | grep -q "^$reviewer$"; then
              echo "-> Waiting for review from '$reviewer'..."
              all_present=false
              break # No need to check further
            else
              echo "-> Review from '$reviewer' is complete."
            fi
          done

          if [ "$all_present" = true ]; then
            echo "✅ All required reviews are in. Proceeding to aggregation."
            echo "run_aggregate=true" >> "$GITHUB_OUTPUT"
          else
            echo "⏳ Still waiting for some reviews. Stopping for now."
            echo "run_aggregate=false" >> "$GITHUB_OUTPUT"
          fi

      # The rest of the steps will ONLY run if the check above passes
      - name: Get PR Info
        if: steps.check_reviews.outputs.run_aggregate == 'true'
        id: pr_info
        run: |
          echo "branch=${{ github.event.pull_request.head.ref }}" >> "$GITHUB_OUTPUT"
          echo "number=${{ github.event.pull_request.number }}" >> "$GITHUB_OUTPUT"

      - name: Generate token
        if: steps.check_reviews.outputs.run_aggregate == 'true'
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.BOT_APP_ID }}
          private_key: ${{ secrets.BOT_PRIVATE_KEY }}

      - name: Checkout PR branch
        if: steps.check_reviews.outputs.run_aggregate == 'true'
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate_token.outputs.token }}
          ref: ${{ steps.pr_info.outputs.branch }}

      - name: Run Aggregation Script
        if: steps.check_reviews.outputs.run_aggregate == 'true'
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          PULL_REQUEST_NUMBER: ${{ steps.pr_info.outputs.number }}
        run: |
          python -m pip install requests
          python scripts/aggregate_reviews.py

      - name: Commit results
        if: steps.check_reviews.outputs.run_aggregate == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(ci): update aggregated code review findings"
          file_pattern: "docs/results.json"

      - name: Trigger Netlify Deployment
        if: steps.check_reviews.outputs.run_aggregate == 'true'
        run: curl -X POST -d {} "${{ secrets.NETLIFY_BUILD_HOOK_URL }}?trigger_branch=${{ steps.pr_info.outputs.branch }}&trigger_title=Deploy%20Preview%20for%20PR%20%23${{ steps.pr_info.outputs.number }}"