# .github/workflows/manual-aggregate.yml
name: Manual Aggregation Trigger

on:
  issue_comment:
    types: [created]

jobs:
  aggregate-on-command:
    if: |
      github.event.issue.pull_request &&
      github.event.comment.body == '/aggregate'
    name: Aggregate on Command
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: read
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 1: Add a reaction to the comment to show the job has started
      - name: Acknowledge command
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ github.event.comment.id }}
          reactions: 'rocket'

      # Step 2: Get PR Info directly from the event payload
      - name: Get PR Info
        id: pr_info
        run: |
          # The PR number is available directly from the issue context
          echo "number=${{ github.event.issue.number }}" >> "$GITHUB_OUTPUT"
          
          # This command will now succeed because the repo is checked out
          branch_name=$(gh pr view ${{ github.event.issue.number }} --json headRefName --jq '.headRefName')
          echo "branch=${branch_name}" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 3: Generate a token for committing results
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.BOT_APP_ID }}
          private_key: ${{ secrets.BOT_PRIVATE_KEY }}

      # Step 4: Checkout the specific PR branch (this is still needed)
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate_token.outputs.token }}
          ref: ${{ steps.pr_info.outputs.branch }}

      # Step 5: Run your aggregation script
      - name: Run Aggregation Script
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          PULL_REQUEST_NUMBER: ${{ steps.pr_info.outputs.number }}
        run: |
          python -m pip install requests
          python scripts/aggregate_reviews.py

      # Step 6: Commit the results
      - name: Commit results
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(ci): update aggregated code review findings"
          file_pattern: "docs/results.json"

      # Step 7: Trigger the deployment
      - name: Trigger Netlify Deployment
        run: curl -X POST -d {} "${{ secrets.NETLIFY_BUILD_HOOK_URL }}?trigger_branch=${{ steps.pr_info.outputs.branch }}&trigger_title=Deploy%20Preview%20for%20PR%20%23${{ steps.pr_info.outputs.number }}"

      # Step 8: Update the comment to show the job is complete
      - name: Mark as complete
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ github.event.comment.id }}
          reactions: 'hooray'